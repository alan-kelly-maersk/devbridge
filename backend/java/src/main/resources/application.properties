# Server Configuration
server.port=8080
spring.application.name=devbridge-service

# PostgreSQL Configuration (DevLib will provide these values from Vault)
spring.datasource.url=${POSTGRES_URL}
spring.datasource.username=${POSTGRES_USER}
spring.datasource.password=${POSTGRES_PASSWORD}

# JPA/Hibernate Configuration
spring.jpa.show-sql=false
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Security Configuration (DevLib will provide these values from Vault)
spring.security.oauth2.resourceserver.jwt.issuer-uri=${AUTH_ISSUER_URI}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${AUTH_JWK_SET_URI}

# Actuator Configuration
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=when_authorized

# DevLib Telemetry Configuration
OTEL_SERVICE_NAME=${spring.application.name}
OTEL_TRACES_EXPORTER=jaeger

# Retina (Kafka) Configuration (DevLib will provide these values from Vault)
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS}
spring.kafka.security.protocol=SSL
spring.kafka.ssl.truststore-location=${KAFKA_TRUSTSTORE_LOCATION}
spring.kafka.ssl.truststore-password=${KAFKA_TRUSTSTORE_PASSWORD}
spring.kafka.ssl.keystore-location=${KAFKA_KEYSTORE_LOCATION}
spring.kafka.ssl.keystore-password=${KAFKA_KEYSTORE_PASSWORD}
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
spring.kafka.properties.schema.registry.url=${SCHEMA_REGISTRY_URL}
spring.kafka.properties.specific.avro.reader=true
